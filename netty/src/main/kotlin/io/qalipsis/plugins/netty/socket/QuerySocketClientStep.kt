package io.qalipsis.plugins.netty.socket

import io.micrometer.core.instrument.MeterRegistry
import io.qalipsis.api.context.StepContext
import io.qalipsis.api.context.StepId
import io.qalipsis.api.events.EventsLogger
import io.qalipsis.api.retry.RetryPolicy
import io.qalipsis.api.steps.AbstractStep
import io.qalipsis.plugins.netty.RequestResult
import io.qalipsis.plugins.netty.monitoring.StepContextBasedSocketMonitoringCollector
import kotlinx.coroutines.withContext
import kotlin.coroutines.CoroutineContext

/**
 * Parent class of steps executing requests using [SocketClient]s created by other steps.
 *
 * @param I type of the input of the step
 * @param O type of the output of the step
 * @param REQ type of the request processed by the client (and generated from I)
 * @param RES type of the response generated by the client (and later converted to O)
 * @param OWNER type of the step that owns the client
 *
 * @author Eric Jess√©
 */
internal abstract class QuerySocketClientStep<I, O : Any, REQ : Any, RES : Any, OWNER : SocketClientStep<*, REQ, RES, *>>(
    id: StepId,
    retryPolicy: RetryPolicy?,
    private val ioCoroutineContext: CoroutineContext,
    val connectionOwner: OWNER,
    private val stepQualifier: String,
    private val requestFactory: suspend (StepContext<*, *>, I) -> REQ,
    private val eventsLogger: EventsLogger?,
    private val meterRegistry: MeterRegistry?
) : AbstractStep<I, RequestResult<I, O, *>>(id, retryPolicy) {

    override suspend fun execute(context: StepContext<I, RequestResult<I, O, *>>) {
        val monitoringCollector =
            createMonitoringCollector(context)
        val input = context.receive()
        try {
            val result = withContext(ioCoroutineContext) {
                connectionOwner.execute(monitoringCollector, context, input, requestFactory(context, input))
            }
            context.send(monitoringCollector.toResult(input, convertResponseToOutput(result), null))
        } catch (e: SocketStepRequestException) {
            throw e
        } catch (e: SocketStepException) {
            throw SocketStepRequestException(
                RequestResult(
                    e.result.sendingFailure,
                    e.result.failure,
                    input,
                    e.result.response,
                    e.result.meters
                )
            )
        } catch (e: Exception) {
            throw SocketStepRequestException(
                RequestResult(
                    monitoringCollector.sendingFailure,
                    e.takeUnless { it == monitoringCollector.sendingFailure },
                    input,
                    null,
                    monitoringCollector.meters
                )
            )
        }
    }

    /**
     * Converts the response from the client into the output of the step.
     */
    @Suppress("UNCHECKED_CAST")
    open fun convertResponseToOutput(response: RES): O = response as O

    protected open fun createMonitoringCollector(context: StepContext<I, RequestResult<I, O, *>>) =
        StepContextBasedSocketMonitoringCollector(context, eventsLogger, meterRegistry, stepQualifier)


}
